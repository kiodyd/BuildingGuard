{"version":3,"sources":["..\\..\\..\\..\\..\\..\\..\\..\\assets\\scripts\\common\\script\\basic\\rankNetwork/assets\\scripts\\common\\script\\basic\\rankNetwork\\network.js"],"names":["window","network","initNetwork","pomeloBuildObj","pomeloBuild","create","pomelo","isBinding","onMessage","bind","netListener","eventListener","reset","_registerNetEvent","curMsgName","routerManager","dispatch","clientEvent","receiveRouterFromServer","on","route","apply","arguments","getCurMsgName","connect","ip","port","cb","netConfig","host","log","isKicked","wsStr","setTimeout","disconnect","isConnected","guid","s4","Math","floor","random","toString","substring","send","routeStr","dataObj","uuid","console","JSON","stringify","addRouterToManager","msgOrigin","router","cc","error","Object","keys","length","setNetLoadingStatus","flag","checkNetLoadingStatus","keysLength","currentTime","Date","now","key","hasOwnProperty","routerTime","deltaTime","netLoadingCheckInterval","indexOf","index","clearCallback","isConnecting","isOpen","isClosed","isClosing","chooseNetworkMode","msgName","handler","msgContent"],"mappings":"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","file":"network.js","sourceRoot":"..\\..\\..\\..\\..\\..\\..\\..\\assets\\scripts\\common\\script\\basic\\rankNetwork","sourcesContent":["window.network = {\r\n    initNetwork: function() {\r\n        this.pomeloBuildObj = pomeloBuild.create();\r\n        this.pomelo = this.pomeloBuildObj.pomelo;\r\n\r\n        this.isBinding = false;\r\n\r\n        if (!this.isBinding) { // 主要为了让onMessage绑定this\r\n            this.onMessage = this.onMessage.bind(this);\r\n            this.isBinding = true;\r\n        }\r\n\r\n        // 只能被network用，其他人不能用\r\n        this.netListener = eventListener.create(\"one\");\r\n        this.reset();\r\n        this._registerNetEvent();\r\n    },\r\n\r\n    reset: function() {\r\n        this.curMsgName = \"\";\r\n\r\n        // 路由管理器（暂名）重置，重置后立马刷新一次netLoading的显示\r\n        this.routerManager = {};\r\n    },\r\n    /**\r\n     内部使用的注册网络回调函数\r\n     */\r\n    _registerNetEvent: function() {\r\n        this.pomelo[\"on\"](\"heartbeat timeout\", function() {\r\n            this.pomelo[\"disconnect\"]();\r\n\r\n            this.netListener.dispatch(\"reconnect timeout\", {});\r\n        }.bind(this));\r\n\r\n        this.pomelo[\"on\"](\"heartbeat recv\", function() {\r\n            clientEvent.dispatch(\"updateNetworkState\", \"heartBeatRet\");\r\n        }.bind(this));\r\n\r\n        this.pomelo[\"on\"](\"close\", function() {\r\n            this.pomelo[\"disconnect\"]();\r\n\r\n            this.netListener.dispatch(\"network close\", {});\r\n        }.bind(this));\r\n\r\n        this.pomelo[\"on\"](\"onKick\", function() {\r\n            this.netListener.dispatch(\"kick user\", {});\r\n\r\n            // 关闭网络loading动画\r\n            this.receiveRouterFromServer('close all netLoading');\r\n        }.bind(this));\r\n    },\r\n\r\n    // 网络协议都是在logic注册的，不能注销\r\n    on: function(route) {\r\n        this.netListener.on.apply(this.netListener, arguments);\r\n        pomelo[\"on\"](route, this.onMessage);\r\n    },\r\n\r\n    getCurMsgName: function() {\r\n        return this.curMsgName;\r\n    },\r\n\r\n    connect: function(ip, port, cb) {\r\n        var netConfig = {\r\n            host: ip,\r\n            port: port,\r\n            log: true\r\n        };\r\n\r\n        this.isKicked = false;\r\n        netConfig.wsStr = \"wss://\";\r\n\r\n        // 解决微信上点击会崩溃的bug,网络连接不能在放在ui层,所以用timeout包装一层\r\n        setTimeout(function() {\r\n            this.pomelo[\"init\"](netConfig, function() {\r\n                if (cb) cb();\r\n            }.bind(this));\r\n        }.bind(this), 0);\r\n    },\r\n\r\n    disconnect: function() {\r\n        if (this.isConnected()) {\r\n            this.pomelo[\"disconnect\"]();\r\n        }\r\n    },\r\n    /**\r\n     *  globally-unique identifiers, 生成一个不重复的随机字符串，用于跟踪请求链\r\n     */\r\n    guid: function() {\r\n        function s4() {\r\n            return Math.floor((1 + Math.random()) * 0x10000)\r\n                .toString(16)\r\n                .substring(1);\r\n        }\r\n\r\n        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +\r\n            s4() + '-' + s4() + s4() + s4();\r\n    },\r\n\r\n    send: function(routeStr, dataObj) {\r\n        if (typeof (dataObj) === \"undefined\") {\r\n            dataObj = {};\r\n        }\r\n\r\n        // 请求参数中加入唯一标识,用于跟踪请求链。\r\n        dataObj.uuid = this.guid();\r\n        console.log(\"send route:\" + routeStr + \" data:\" + JSON.stringify(dataObj));\r\n\r\n        // 记录路由请求\r\n        this.addRouterToManager(routeStr);\r\n\r\n        if (this.isConnected()) {\r\n            this.pomelo[\"request\"](routeStr, dataObj, this.onMessage);\r\n        }\r\n    },\r\n\r\n    onMessage: function(msgOrigin) {\r\n        var router = msgOrigin[\"route\"];\r\n\r\n        this.receiveRouterFromServer(router);\r\n\r\n        console.log(\"receive msg from :\" + JSON.stringify(msgOrigin));\r\n\r\n        if (msgOrigin[\"body\"][\"code\"] === 500) {\r\n            cc.error(\"server data error, can't find the route:\" + router);\r\n            // pomelo异常处理都返回500，仍然需要做分发处理\r\n            // return;\r\n        }\r\n\r\n        if (!router) {\r\n            cc.error(\"please add the msg route in server\");\r\n            return;\r\n        }\r\n\r\n        // 空数据\r\n        if (Object.keys(msgOrigin[\"body\"]).length <= 0) {\r\n            cc.error(\"server data error, can't response no data proto\");\r\n            return;\r\n        }\r\n\r\n        this.curMsgName = msgOrigin[\"route\"];\r\n\r\n        this.netListener.dispatch(msgOrigin[\"route\"], msgOrigin[\"body\"]);\r\n    },\r\n\r\n    setNetLoadingStatus: function(flag) {\r\n        if (flag) {\r\n            // clientEvent.dispatch(\"showPanel\", \"netLoadingPanel\");\r\n        } else {\r\n            clientEvent.dispatch('hidePanel', \"netLoadingPanel\");\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 检测 netLoading 的显示状态\r\n     * 从 routeManager 中获取每个记录的路由的请求时间，与当前时间对比\r\n     * 如果超出阈值就显示 netLoading\r\n     * 注：已返回的路由就会从 routerManager 中删掉\r\n     */\r\n    checkNetLoadingStatus: function() {\r\n        var keys = Object.keys(this.routerManager);\r\n        var keysLength = keys.length;\r\n        if (keysLength <= 0) {\r\n            this.netListener.dispatch('hidePanel', \"netLoadingPanel\");\r\n            return;\r\n        }\r\n\r\n        var currentTime = Date.now();\r\n        for (var key in this.routerManager) {\r\n            if (this.routerManager.hasOwnProperty(key)) {\r\n                var routerTime = this.routerManager[key];\r\n                var deltaTime = currentTime - routerTime;\r\n                if (deltaTime > this.netLoadingCheckInterval) {\r\n                    // 存在路由的请求时间超出了阈值，显示 netLoading\r\n                    // 有路由显示的话，就不再检查其他的路由\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 将路由添加到路由管理器（暂名）\r\n     * @param {String} router 路由名\r\n     * 将 { 路由名 => 时间 } 作为键值对存起来，如果是已经存在的路由，则跳过\r\n     */\r\n    addRouterToManager: function(router) {\r\n        var keys = Object.keys(this.routerManager);\r\n\r\n        // 断线重连期间，拒绝其他的路由加入\r\n        if (keys.indexOf('connectTimeout') === -1) {\r\n            // 断线重连时，清空路由\r\n            if (router === 'connectTimeout') {\r\n                this.routerManager = {};\r\n            }\r\n\r\n            keys = Object.keys(this.routerManager);\r\n            var index = keys.indexOf(router);\r\n            if (index === -1) {\r\n                var currentTime = Date.now();\r\n                this.routerManager[router] = currentTime;\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 收到网络返回，将路由管理器（暂名）中对应的路由删掉\r\n     * @param {String} router 路由名\r\n     */\r\n    receiveRouterFromServer: function(router) {\r\n        if (router === 'close all netLoading') {\r\n            this.routerManager = {};\r\n            this.checkNetLoadingStatus();\r\n            return;\r\n        }\r\n        var keys = Object.keys(this.routerManager);\r\n        var index = keys.indexOf(router);\r\n        if (index > -1) {\r\n            console.log(router, \"cost\", Date.now() - this.routerManager[router], \"ms\");\r\n            delete this.routerManager[router];\r\n\r\n            // 删除之后要刷新一次 netLoading 的显示\r\n            this.checkNetLoadingStatus();\r\n        }\r\n    },\r\n    /**\r\n     * 请客网络回调\r\n     */\r\n    clearCallback: function() {\r\n        if (this.pomelo) this.pomelo.clearCallback();\r\n    }\r\n};\r\n\r\nnetwork.isConnecting = function() {\r\n    return this.pomelo.isConnecting();\r\n};\r\n\r\nnetwork.isConnected = function() {\r\n    return this.pomelo.isOpen();\r\n};\r\n\r\nnetwork.isClosed = function() {\r\n    return this.pomelo.isClosed();\r\n};\r\n\r\nnetwork.isClosing = function() {\r\n    return this.pomelo.isClosing();\r\n};\r\n\r\nnetwork.chooseNetworkMode = function() {\r\n    this.initNetwork();\r\n    if (this.pomelo) {\r\n        for (var key in this.netListener) {\r\n            this.pomelo[\"on\"](key, this.onMessage);\r\n        }\r\n    }\r\n};\r\n\r\nnetwork.on = function(msgName, handler) {\r\n    this.netListener.on(msgName, handler);\r\n};\r\n\r\nnetwork.dispatch = function(msgName, msgContent) {\r\n    this.netListener.dispatch(msgName, msgContent);\r\n};\r\n"]}